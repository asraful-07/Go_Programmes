package main

import "fmt"

// тЬЕ ржПржЦрж╛ржирзЗ result ржПржХржЯрж╛ named return variable
func add() (result int) {
	fmt.Println("first", result) // рж╢рзБрж░рзБрждрзЗ result ржПрж░ ржорж╛ржи 0, рждрж╛ржЗ ржПржЯрж╛ ржкрзНрж░рж┐ржирзНржЯ рж╣ржмрзЗ

	// ржПржЯрж╛ ржПржХржЯрж╛ ржлрж╛ржВрж╢ржи ржпрзЗржЯрж╛ ржкрж░рзЗ (defer) ржЪрж╛рж▓рж╛ржирзЛ рж╣ржмрзЗ
	show := func() {
		result = result + 10 // result ржПрж░ ржорж╛ржи рззрзж ржпрзЛржЧ ржХрж░рзЗ ржЖржкржбрзЗржЯ рж╣ржЪрзНржЫрзЗ
		fmt.Println("defer", result) // defer block ржерзЗржХрзЗ ржкрзНрж░рж┐ржирзНржЯ
	}

	defer show() // ЁЯФБ ржПржЗ ржлрж╛ржВрж╢ржиржЯрж╛ ржлрж╛ржВрж╢ржи рж╢рзЗрж╖ рж╣ржУржпрж╝рж╛рж░ рж╕ржоржпрж╝ ржЪрж▓ржмрзЗ

	result = 5 // ржПржЦржи result = 5 рж╕рзЗржЯ ржХрж░рж╛ рж╣рж▓рзЛ
	fmt.Println("second", result) // ржкрзНрж░рж┐ржирзНржЯ рж╣ржмрзЗ second 5

	return result // return ржХрж░рж╛рж░ ржарж┐ржХ ржЖржЧрзЗ defer ржХрж╛ржЬ ржХрж░ржмрзЗ ржПржмржВ result ржЖржкржбрзЗржЯ рж╣ржмрзЗ
}

// тЭМ ржПржЦрж╛ржирзЗ result рж╣ржЪрзНржЫрзЗ рж╕рж╛ржзрж╛рж░ржг local variable, named return ржирж╛
func calc() int {
	result := 0 // рж╢рзБрж░рзБрждрзЗ result = 0
	fmt.Println("first", result)

	show := func() {
		result = result + 10 // ржПржЯрж╛ local variable modify ржХрж░рзЗ
		fmt.Println("defer", result) // defer block ржерзЗржХрзЗ ржкрзНрж░рж┐ржирзНржЯ
	}

	defer show() // ЁЯФБ ржлрж╛ржВрж╢ржи рж╢рзЗрж╖ рж╣ржУржпрж╝рж╛рж░ рж╕ржоржпрж╝ ржЪрж▓ржмрзЗ

	result = 5
	fmt.Println("second", result)

	return result // ржПржЦрж╛ржирзЗ return value ржЖржЧрзЗ ржарж┐ржХ рж╣ржпрж╝рзЗ ржпрж╛ржпрж╝, рждрж╛рж░ржкрж░ defer ржЪрж▓рзЗ
}

func main() {
	a := add()
	fmt.Println("main first", a) // ржПржЦрж╛ржирзЗ ржкрзНрж░рж┐ржирзНржЯ рж╣ржмрзЗ 15 ржХрж╛рж░ржг defer result ржХрзЗ modify ржХрж░рзЗ

	b := calc()
	fmt.Println("main second", b) // ржПржЦрж╛ржирзЗ ржкрзНрж░рж┐ржирзНржЯ рж╣ржмрзЗ 5 ржХрж╛рж░ржг return value ржЖржЧрзЗ fix рж╣ржпрж╝
}
